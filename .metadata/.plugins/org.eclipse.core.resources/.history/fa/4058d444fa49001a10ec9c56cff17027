package dynamicProgramming.topDown;
import java.util.Arrays;
import java.util.Collections;

public class BinPacking {

	private int maxSize;
	private int[] bins;

	BinPacking(int maxSize, int[] weights) {
		this.maxSize = maxSize;
		this.bins = new int[weights.length];
//		for (int i = 0; i < weights.length; i++)
//			this.bins[i] = this.maxSize;
		Arrays.fill(this.bins, maxSize);
		
		BP(bins, sortDecendingOrder(weights));
	}

	private void BP(int[] bins, int[] weights) {

		for (int j = 0; j < bins.length; j++) {
			if (weights[0] <= bins[j]) {
				bins[j] -= weights[0];
				break;
			}
		} // Sub optimal
		System.out.println("Weight : " + weights[0] + "\t Bin Status : " + Arrays.toString(bins));
		if (1 < weights.length)
			BP(sortDecendingOrder(bins), Arrays.copyOfRange(weights, 1, weights.length));
	}

	int binCount() {

		int temp = 0;
		for (int i = 0; i < bins.length; i++)
			if (bins[i] < maxSize)
				temp++;
		return temp;
	}

	private int[] sortDecendingOrder(int[] array) {
		Arrays.parallelSort(array);
		Collections.reverse(Arrays.asList(array));
		return array;
	}

	public static void main(String args[]) {

		int[] objs = { 2, 5, 4, 7, 1, 3, 8, 5, 8, 10, 7, 1, 2, 3 ,4 };
		BinPacking bp = new BinPacking(10, objs);
		System.out.println("\t No of bin used: " + bp.binCount());

	}

}
